'use strict';
var models = require('../models');
var utils = require('./utils');
var items = require('./items');

var pathJS = require('path');
//var itemList = new items();
var fs = require('fs');
var fileTypes = '';
var basePath = '';

/*
    * Checks wether file extension matches allowed ones
    * ext = extension
*/
//TODO: change file extensions to mime types
function checkType(ext) {
    let found = false;
    for (let i in fileTypes) {
        if (fileTypes[i] === ext) {
            found = true;
            break;
        }
    }
    return found;
}

/*
    * Deletes items from database which cannot be found in directory structure
*/
function deleteMissingItems(itemList) {
    return new Promise(function (resolve, reject) {
        if (itemList.items.length > 0) {
            for (let i in itemList.items) {
                models.items.destroy({ where: { id: itemList.items[i].id }, limit: 1 });
            }
            itemList.items.length = 0;
            resolve(true);
        }
        else {
            resolve(false);
        }
    });
}

/*
    * Fills item list with items from database
*/
function init() {
    return new Promise(function (resolve, reject) {
        utils.getPath().then(function (data) {
            basePath = data;
        });
        utils.getTypes().then(function (data) {
            fileTypes = data;
           
        });
        resolve(true);
    });
}

//TODO: Comment
/*
    * Fills Item List array with items from database
*/
//FIXME: use users_data table instead of items  
function fillItemList() {
    return new Promise(function (resolve, reject) {
        var itemList = new items();
        models.items.findAll().then(function (allitems) {
            allitems.map(function (obj) {
                itemList.addItem({ path: obj.path, id: obj.id });
            });            
            resolve(itemList);
        }).catch(function (err) {
            reject(err);
        });
    });
}

/*
    * Reads directory
    * path     = path to directory
    * level    = parent id in database (0 for first call)
    * itemList = list of items in db (generated by fillItemList)
*/
function readDir(path, level, itemList) {
    var folderArray = Array();
    return new Promise(function (resolve, reject) {
        path = path.concat(pathJS.sep);
        
        var cycle = new Promise(function (resolve, reject) {
            let data = fs.readdirSync(path);
            for (let i in data) {
                let newPath = path.concat(data[i]);
                
                try {
                    let stats = fs.statSync(newPath);
                    var newlevel = 0;
                    if (stats.isDirectory()) {
                        itemList.removeItem({ path: newPath }).then(function (msg) {
                            folderArray.push(readDir(newPath, parseInt(msg), itemList));
                        }).catch(function (msg) {

                            models.items.create({ name: data[i], parent: level, type: 0, path: newPath }).then(function (createditem) {
                                newlevel = createditem.id;
                                folderArray.push(readDir(newPath, newlevel, itemList));
                            });
                        });
                    } else {
                        if (checkType(utils.fixExtension(data[i]))) {
                            itemList.removeItem({ path: newPath }).catch(function (msg) {
                                let tmp = pathJS.parse(data[i]);
                                models.items.create({ name: tmp.name, parent: level, type: 1, path: newPath });
                            });
                        }
                    }
                } catch (err) {
                    //TODO: Change to something formal
                    console.log("tikriausiai dir eroras = " + err);
                }
            }
            resolve(true);
        });
        
        cycle.then(function (tmp) {
            if (folderArray.length > 0) {
                Promise.all(folderArray).then(function (data) {
                    resolve(itemList);
                }).catch(function (err) {
                    console.log(err);
                });
            } else {
                resolve(itemList);
            }
        });
    });
}

/*
    * Public method to initiate scan, returns integer:
    *   -1 if failed
    *    0 if nothing was changed
    *    x number of items deleted
*/
//TODO: create counter for added items and return it from readdir
function scan() {
    return new Promise(function (resolve, reject) {
        init().then(function (asd) {
            fillItemList().then(function (itemList) {
                readDir(basePath, 0, itemList).then(function (itList) {
                    if (itList.items.length > 0) {
                        deleteMissingItems(itList).then(function (returned) {
                            if (returned) {
                                resolve(itList.items.length);
                            } else {
                                reject("Failed to delete " + itList.items.length + " items.");
                            }
                        });
                    } else {
                        resolve(0);
                    }
                }).catch(function (err) {
                    console.log("readdir = " + err);
                    reject(err);
                });
            }).catch(function (err) {
                console.log("Failed scandir: " + err);
                reject(err);
            });
        });
    });
}

exports.scan = scan;